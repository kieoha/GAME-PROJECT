import random
import sys

class Player:
    def __init__(self):
        self.health_points = 70
        self.intellect_points = 40
        self.social_points = 20
        self.study_at_home_town_bonus = False
        self.intellect_bonus = False
        self.social_bonus = False
        self.all_bonuses = False
        self.all_events = False
        self.exhausted = False
        self.game_over = False

        self.lesson_count = 0
        self.extra_curriculum_count = 0
        self.right_answer_count = 0
        self.wrong_answer_count = 0

        self.max_truant = False
        self.attend_extra_lesson = False

        self.sport_lesson_count = 0
        self.truant_count = 0

    def change_hp(self, points):
        self.health_points += points
        if self.health_points > 100:
            self.health_points = 100
        print(f"Здоровье изм. на {points}, всего {self.health_points}")
        if 0 <= self.health_points <= 20:
            print("Низкий уровень здоровья, будьте осторожны")
        if self.health_points <= 0:
            print("Достигнут критический уровень здоровья. Игра окончена.")
            self.end_game("Вот что бывает, когда не думаешь о своём здоровье...")

    def change_int(self, points):
        self.intellect_points += points
        print(f"Интеллект изм. на {points}, всего {self.intellect_points}")
        if self.intellect_points <= 0:
            print("Интеллект опустился до нуля. Игра окончена.")
            self.end_game("Вы забыли, каково это - учиться...")

    def change_soc(self, points):
        self.social_points += points
        if self.social_points > 100:
            self.social_points = 100
        print(f"Социальные пойнты изм. на {points}, всего {self.social_points}")
        if self.social_points <= 0:
            print("Критический уровень социальных навыков. Игра окончена.")
            self.end_game("Социальная изоляция - худшее наказание... наказали вы себя сами.")

    def end_game(self, ending_text):
        print(f"\n=== Концовка ===\n{ending_text}\n")
        self.game_over = True
        sys.exit()

player = Player()

class Achievements:
    def __init__(self, name, param, p_value_needed, text):
        self.name = name
        self.param = param
        self.p_value_needed = p_value_needed
        self.bool_value = False
        self.text = text

    def check(self):
        if self.param >= self.p_value_needed:
            self.bool_value = True
            print(f"Получено достижение - {self.name}: {self.text}")

class Questions:
    def __init__(self, question_text, right_answer, text_right_answer, text_wrong_answer, day):
        self.question_text = question_text
        self.right_answer = right_answer
        self.text_right_answer = text_right_answer
        self.text_wrong_answer = text_wrong_answer
        self.day = day

    def trigger(self):
        print(self.question_text)
        answer = input("Введите правильный ответ (цифра): ")
        if answer == self.right_answer:
            print(self.text_right_answer)
            player.change_int(10)
            player.change_soc(5)
            player.right_answer_count += 1
        else:
            print(self.text_wrong_answer)
            print("Правильный ответ:", self.right_answer)
            player.change_int(5)
            player.change_soc(-5)
            player.wrong_answer_count += 1


question_1 = Questions(
    """Гиперфонема - это:
1) долгая фонема
2) фонема под ударением
3) фонема, которая не бывает под ударением""",
    "3",
    "Да, это правильное определение гиперфонемы.",
    "Увы, ответ неверный.",
    1)

question_2 = Questions(
    """Единицей фонетического членения речи является:
1) синекдоха
2) синтагма
3) семема""",
    "2",
    "Именно так!",
    "Ответ неверный. Кажется, вы запутались в определениях.",
    2)

question_3 = Questions(
    """Имя автора теории генеративной грамматики:
1) Noam Chomsky
2) Nom Chompsky
3) Nim Chimpsky""",
    "1",
    "Правильно! Хорошо, что вы помните не только теорию, но и тех, кто сделал вклад в развитие науки.",
    "Неверно. Вы потеряли грань между мемами и суровой реальностью лингвистической теории.",
    3)

question_4 = Questions(
    """К индоевропейской семье языков не относят:
1) албанский
2) финский
3) готский""",
    "2",
    "Отлично! Ваш одногруппник-фанат уральских языков готов пожать вам руку.",
    "Неверно! Стоит повторить теорию по языкам мира.",
    4)

question_5 = Questions(
    """Какая из грамматических категорий в русском языке для имен существительных является классифицирующей?
1) падеж
2) число
3) род""",
    "3",
    "Хорошо! Изучая иностранные языки, не забывайте про свой родной.",
    "Неправильный ответ. Ох уж эти грамматические категории...",
    5)

question_6 = Questions(
    """Электрический” и “электронный” это..:
1) типичные онимы
2) частичные синонимы
3) просто паронимы""",
    "3",
    "Верно! Это действительно было просто.",
    "Неправильно! Кажется, вы снова не подготовились к семинару по лексикологии.",
    6)

question_7 = Questions(
    """Выберите неправильное утверждение:
1) буква не является знаком
2) аккомодация  происходит между звуками разного типа
3) “глокая куздра” была придумана Л. В. Щербой""",
    "1",
    "Преподаватель доволен вашим ответом.",
    "Неверно!",
    7)

question_list = [question_1, question_2, question_3, question_4, question_5, question_6, question_7]

class RandomEvents:
    def __init__(self, name):
        self.name = name
        self.day = 0
        self.happened = False
        self.check = False
        self.accepted = False

    def day_check(self, day):
        if self.day == day:
            self.check = True

transport_event = RandomEvents("transport_event")
lecturer_ill = RandomEvents("lecturer_ill")
sport_lesson = RandomEvents("sport_lesson")
volunteer_day = RandomEvents("volunteer_day")
truant_offer = RandomEvents("truant_offer")

random_event_list = [transport_event, lecturer_ill, sport_lesson, volunteer_day, truant_offer]

x = [1, 2, 3, 4, 5]
random.shuffle(x)
for i, event in enumerate(random_event_list):
    event.day = x[i]
    # print(event.day)
# ===== внеучебка =====
class ExtraCurriculum:
    def __init__(self, name, text, right_answer, wrong_answer, right_answ_result, wrong_answ_result):
        self.name = name
        self.text = text
        self.right_answer = right_answer
        self.wrong_answer = wrong_answer
        self.right_answ_result = right_answ_result
        self.wrong_answ_result = wrong_answ_result
        self.right_answ_count = 0

    def action(self, day):
        print(self.text[day])
        print(self.right_answer[day])
        print(self.wrong_answer[day])
        a = int(input("Выберите ответ (1, 2 )"))
        if a == 1:
            print(self.right_answ_result[day])
            self.right_answ_count += 1
        else:
            print(self.wrong_answ_result[day])


fencing_text = [
    "Первый день в фехтовальном клубе. Сегодня будет организационное занятие, на котором вы узнаете, что и как нужно делать. И познакомиться с другими членами клуба. Только найти общий язык будет непросто: все члены клуба кажутся такими сильными, ловкими, спортивными...",
    "Сегодня на занятии расскажут о том, как фехтовальщики должны шагать. Тренер показывает движения, объясняет, как ставить ноги, держать осанку, смотреть вперед. Он подходит к вам, чтобы проверить, усвоили ли вы эти знания. У вас в голове крутится лишь одна мысль:..",
    "Сегодня вы впервые возьмете меч в руки. Вот он, клинок как у короля Артура / довакина / палладина из Варкрафта... Так, кажется, вы замечтались, возьмите уже наконец оружие в руки.",
    "Сегодня показывают основные фехтовальные стойки. Вы пытаетесь запомнить множество странных названий:..",
    "Самое время переходить к упражнениям. Тренер показал несколько простых ударов, которые нужно потренировать на груше.",
    "Ура! Сегодня вы впервые встанете в поединок и будете биться с другим участником клуба. Но сначала нужно выбрать снаряжение. Вы подходите к шкафу с фехтовальными масками и выбираете, какую надеть:..",
    "Сегодня, как и вчера, будут поединки. Какого соперника выберете?"
]

fencing_right_answer = [
    "1) Скорее познакомиться с кем-нибудь",
    "1) Присогнуть и расслабить колени, присогнуть и расслабить колени, присогнуть и расслабить колени...",
    "1) Взять меч, аккуратно поставив рядом с собой окончанием в пол",
    "1) Плуг, бык, железная дверь, крыша...",
    "1) Медленно и аккуратно бить грушу (эх, как же скучно...)",
    "1) Эта выглядит грязной и потрепанной, но прочной",
    "1) Опытный фехтовальщик: выглядит дружелюбно, но такого точно не победить..."
]

fencing_wrong_answers = [
    "2) Они все такие странные... Наверное, лучше держаться особняком от остальных",
    "2) Стопы вместе, руки врозь..? Как же все сложно...",
    "2) Закинуть меч на плечо, держа обеими руками",
    "2) Надо бы придумать свои названия: поза 'в атаку', поза 'в атаку, но агрессивнее', поза 'в атаку но пафосно'...",
    "2) Взять небольшой размах и бить посильнее",
    "2) Новенькая и чистенькая - лучший выбор!",
    "2) Новичок: не более опытный, чем вы, у вас есть шанс одержать победу"
]

fencing_right_answ_result = [
    "Кажется, у вас появился первый друг-одноклубник. Отличное завершение первого учебного дня!",
    "У вас пока что плохо получается, но вы движетесь в правильном направлении",
    "Хорошо, что вы не забываете про технику безопасности.",
    "Вам пока что не удается запомнить все названия, но это всего лишь дело практики.",
    "Вам все еще трудно совладать с мечом, но через несколько занятий будет намного проще.",
    "Маска села на голову как влитая и защитила от каждого удара напарника.",
    "У вас не было шансов. Но напарник похвалил вас и поделился ценным опытом. У вас появился новый друг!"
]

fencing_wrong_answ_result = [
    "В одиночку будет не так весело, но это не помешает получить вам удовольствие, так ведь?..",
    "Кажется, вы ничего не запомнили из советов тренера. Он заставил вас тренировать шаги до конца занятия.",
    "Вы чуть не попали по другому студенту, пока поднимали меч. Тренер сделал вам замечание о нарушении техники безопасности.",
    "Вы отлично запомнили... ваши собственные названия, но не сами позиции... Придется учить заново.",
    "Вы устали быстрее, чем освоили удары. Такими темпами вы будете очень долго осваивать азы фехтования.",
    "С первым же ударом маска помялась, а вы получили шишку. Это был первый и последний раз, когда вы ее надели.",
    "Вы победили! Но стоило ли оно того?.. Этот поединок оказался довольно скучным."
]

theatre_text = [
    "Добро пожаловать в театралку! Вы выбрали для себя путь высокого искусства! Завтра у вас первое организационное собрание. Возможно, оно немного затянется, вы готовы будете остаться до поздна?",
    "Самое время выдвигаться на собрание. Домашки, конечно, много… Но вы же всё равно сможете прийти?",
    "Сегодня первая репетиция. Планируется распределение ролей, читка сценария и немного речевой практики. Вы же пойдете на репетицию?",
    "Сегодня в клубе выходной, собрания не будет, но вам стоит подучить сценарий, если вы ещё планируйте в нем участвовать. На это уйдут какое-то время и силы, готовы их потратить?",
    "Глава клуба хочет проверить, выучили ли вы сценарий. За кого вы играете? Где вообще происходит действие? Как звали дочь Диогена?",
    "Сегодня репетиция отменяется, глава клуба заболел. Но ваши коллеги по клубу решили собраться самостоятельно и провести дополнительный прогон. Вы пойдете с ними?"
    "Сегодня проходит генеральная репетиция. Вы успели повторить свою роль?"
]

theatre_right_answer = [
    "1) Да",
    "1) Время всегда найдется",
    "1) Конечно!",
    "1) Без проблем, это действительно важно",
    "1) Стражник дворца, в Синопе, Милена",
    "1) Определенно, лишних репетиций не бывает",
    "1) Конечно (зевает после бессонной ночи)"
]

theatre_wrong_answers = [
    "2) Нет",
    "2) Хм, лучше все-таки потратить время на дз",
    "2) Жаль… Пропускать репетиции вообще-то плохо. Побудете греческим рабом в массовке",
    "2) Лучше займусь дз",
    "2) Эм...",
    "2) Репетиция без главы? Звучит так себе",
    "2) Конечно нет, мне не хватает времени на все"
]

theatre_right_answ_result = [
    "Вы устали, но весело провели время",
    "Собрание было действительно долгим, зато вы внимательно выслушали всю информацию и теперь знаете, что собираетесь делать дальше",
    "Репетиция прошла продуктивно, вы наконец получили первую роль",
    "Вы лучше запомнили свою роль.",
    "Отлично, вы все помните",
    "Репетиция прошла успешно даже без главы клуба. Вы чувствуете себя уверенно",
    "Репетиция прошла прекрасно. Вы готовы к выступлению"
]

theatre_wrong_answ_result = [
    "Кажется, вы пропустили важную информацию",
    "Что ж, не беда, многие новички поступили как вы, в конце концов это ещё не репетиции",
    "После репетиции глава прислал вам вашу роль, но сделал замечание об отсутствии",
    "Если вы не начнете уделять внеучебной деятельности больше времени, то... зачем вы вообще ходите?",
    "Вы чуть не потеряли свою роль. К счастью, она не сложная и вы можете доучить сегодня вечером.",
    "Репетиция все-таки прошла, но без вас. Надеюсь, вы успеете доучить роль к следующей репетиции",
    "Вы не очень хорошо показали себя на репетиции. Но так как у вас роль второго плана, глава сжалился и решил вас оставить"
]

fencing = ExtraCurriculum("клуб фехтовальщиков", fencing_text, fencing_right_answer, fencing_wrong_answers, fencing_right_answ_result, fencing_wrong_answ_result)
theatre = ExtraCurriculum("театральный клуб", theatre_text, theatre_right_answer, theatre_wrong_answers, theatre_right_answ_result, theatre_wrong_answ_result)

def introduction():
    print("Поздравляем! Вы поступили в наш университет. В целях сбора статистики ответьте на три вопроса:")
    a = int(input("Вы поступили в университет, находящийся в вашем родном городе? Да / Нет (1, 2) "))
    b = int(input("Вы получили место на бюджетной основе? Да / Нет (1, 2) "))
    c = int(input("Вы узнали о нашем вузе от друзей / знакомых / родственников? Да / Нет (1, 2) "))
    if a == 1:
        player.study_at_home_town_bonus = True
    if b == 1:
        player.change_int(10)
        player.intellect_bonus = True
    if c == 1:
        player.change_soc(10)
        player.social_bonus = True
    print(f"""Благодарим за ответ! (Статистика:
    Здоровье: {player.health_points}
    Интеллект: {player.intellect_points}
    Социальные навыки: {player.social_points})""")
    if player.study_at_home_town_bonus and player.social_bonus and player.intellect_bonus:
        player.all_bonuses = True
    return player

def morning():
    if player.study_at_home_town_bonus:
        print("Родители как всегда разбудили вас и отправили завтракать. После вкусного домашнего завтрака вас отвезут в университет.")
        player.change_hp(10)
    else:
        print("Звонит будильник, пора вставать, завтрак сам себя не съест.")
        d = int(input("Что будете есть сегодня? Приготовим / купим готовый / купим кофе / не будем есть (1, 2, 3, 4)  "))
        if d == 1:
            print("Вкусный и полезный завтрак")
            player.change_hp(10)
        elif d == 2:
            print("Не самый полезный выбор, но все еще довольно вкусно")
            player.change_hp(5)
        elif d == 3:
            print("Не питательно, зато бодрит")
        else:
            print("Вот бы люди умели питаться энергией солнца, а не едой...")
            player.change_hp(-5)
    print()
    print("Пора выдвигаться в путь.")

def lesson():
    print("Начинаются занятия.")
    print("Вопрос от преподавателя: ")
    for i, el in enumerate(question_list):
        if i == day:
            el.trigger()
    print("Вы набрались опыта и стали чуть умнее. Продолжайте усердно учиться, и экзамен покажется лёгким.")
    print("Занятия подошли к концу")


def extra_curriculum():
    answer = input("Начинаются внеучебные занятия. Чуть позже мы добавим задания, а пока что просто нажмите enter.")

joke_list = [
    "В «Магните» появились кассы самообслуживания, а это значит, что после филфака шансов найти работу стало еще меньше.",
    "Самый длинный сон был зафиксирован у студента Сидорова, который, уснув на паре по истории, проспал с XVII по XX век.",
    "Как думаете, прилично сдавать курсовую работу, которая высвечивается в «Яндексе» на третьей строке?",
    "Сын депутата поступил в МГУ без сдачи экзаменов. На его месте так поступил бы каждый.",
    "Дайте студенту точку опоры, и он тут же уснет.",
    "Антиплагиат показал, что я стырил абзац из Википедии. Зашел на Вики и удалил оттуда этот абзац.",
    "Хорошо сдавать экзамены на Луне. Там все предметы в шесть раз легче.",
    "У студента кончились все деньги, осталось на телеграмму домой на одно слово. Текст телеграммы: «пятидесятирублируйте»",
    "На зачете по философии студент доказал преподавателю, что никаких лекций не было, да и науки такой не существует.",
    "На экзамене студент Сидоров неожиданно для себя вытянул военный билет.",
    "Тема диссертации аспиранта: Уклонение от прохождения воинской службы методом имитации научной деятельности",
    "Очень мотивирует, когда по телефону объясняешь курьеру, как попасть в Главное здание МГУ, а он тебе заявляет: ‘Я знаю, я его заканчивал’.",
    """— У вас сколько баллов на ЕГЭ по древнерусскому?
— Уйма.
— Извините, у нас проходной балл — тьма.
""",
    """— Чего ты плачешь?
— Да книжка грустная.
— А что за книжка?
— Зачетная.
""",
    """Экзамен. Профессор говорит студенту:
— Выбирайте билет.
Студент выставляет на стол коньяк. Профессор:
— О! Коньяк — это хорошо.
Студент:
— Коньяк — это «отлично».
""",
    """Корреспондент газеты решил выявить уровень подготовки студентов. Он задал студентам разных курсов один вопрос: «Сколько будет 2х2?»
Результаты его опроса были следующими:
— первокурсник с уверенностью ответил: «четыре»;
— второкурсник вытащил шпаргалку с таблицей умножения;
— третьекурсник достал калькулятор и быстренько сосчитал;
— четверокурсник побежал в дисплейный класс составлять программу;
— пятикурсник с негодованием заявил: «Чё я, все константы помнить обязан?!»
""",
    """1 курс: Ну всё, выгонят. Точно выгонят...
2 курс: А может не выгонят? Да нет выгонят.
3 курс: Ну теперь не выгонят...
4 курс: Ну точно, не выгонят...
5 курс: Пусть только попробуют!!!
""",
    """Дневник студента.
Понедельник. Осталось 10 рублей. Очень хочется кушать.
Вторник. Осталось 5 рублей. Очень хочется кушать.
Среда. Денег нет. Страшно хочется кушать.
Четверг. Получил стипендию. Пришёл в общежитие, дальше не помню.
Пятница. Не помню.
Суббота. Не помню.
Воскресенье. Не помню.
Понедельник. Осталось 10 рублей. Очень хочется кушать...
""",
    """Объявление на дверях приёмной комиссии:
— Приёмная комиссия закрыта. Все билеты проданы!
"""
]

def evening():
    print("Вы наконец добрались до дома")
    f = int(input("Чем займетесь? дз / свои дела (1, 2)  "))
    if f == 1:
        print("Пожалуй, стоит потратить время на учебу.")
        print("Склонившись над кучей учебников, вы не замечаете, как летит время. Глаза слипаются, спина гудит, но вы не сдаетесь в борьбе со сном.")
    else:
        print("Никогда не стоит забывать про себя любимого.")
        print("Вы решили немного посидеть в соцсетях. Вас затянуло чтение мемов. Вот один из них: ")
        print()
        print(random.choice(joke_list))
        print()
        a = input("Посмотреть еще? да / нет (1, 2)  ")
        for i in range(0, 3):
            if a == "1":
                print("Вы решили еще немного посидеть в соцсетях. Вас затянуло чтение мемов. Вот один из них: ")
                print()
                print(random.choice(joke_list))
                print()
                a = input("Посмотреть еще? да / нет (1, 2)  ")
            else:
                break
    print("Вы не заметили, как закончился день. Время ложиться спать")

def bus_or_car_event():
    if player.study_at_home_town_bonus:
        print("Вашу машину остановила полиция для проверки документов. По какой-то причине она затянулась. Дальше придется добираться своим ходом")
    else:
        print("О нет! Автобус сломался... Придется добираться до корпуса пешком.")
    player.change_hp(-5)
    e = int(input("Что будете делать? Опоздание на пару / прогул пары (1, 2)  "))
    if e == 2:
        truant()
    else:
        late_lesson()

def ill_lecturer():
    print("Хм... Препода слишком долго нет. Кажется, из учебного офиса так и не пришло письмо о том, что он заболел и пары сегодня отменяются.")
    f = int(input("Чем займетесь? Слушать лекцию другого потока / Прогул (1, 2)"))
    if f == 1:
        print("Решено сходить на лекцию другой группы. Внезапно, вы получили удовольствие от роли вольнослушателя и с пользой провели время. Полученные знания обязательно однажды пригодятся вам (но это не точно)")
        player.change_hp(-5)
        player.change_int(10)
        player.attend_extra_lesson = True
    else:
        truant()

def late_lesson():
    print("Вы опоздали на пару. Препод посчитал это за неуважительное отношение к его предмету.")
    player.change_soc(-5)
    player.change_int(5)


def truant_event():
    print("К вам подошли друзья. Они хотят пропустить пару и пойти погулять.")
    g = int(input("Пойдете с ними? да / нет (1, 2)  "))
    if g == 1:
        truant()
    else:
        lesson()

def truant():
    print("Вы решили оставить занятия")
    player.change_soc(5)
    player.change_int(-10)
    player.truant_count += 1

def sport():
    print("Пришло напоминание о том, что нужно посещать занятия по физре. Сегодня как раз отличный день для этого. Только тогда придется пропустить внеучебку.")
    h = int(input("Пойдем? да / нет (1, 2)  "))
    if h == 1:
        print("Нестрашно пропустить внеучебку один раз. Зачет все равно придется получать рано или поздно")
        player.change_hp(10)
        player.change_soc(-5)
        player.sport_lesson_count += 1
    else:
        print("Вы решили. что физру можно закрыть позже, а сегодня можно пропустить занятие")
        player.change_hp(-5)
        extra_curriculum()

def volunteering():
    print("Вам предложили поучаствовать в мероприятии в качестве волонтера. Вам придется пропустить пары и внеучебные занятия, но зато вы получите бонусы за активность.")
    j = int(input("Что делать? волонтёрить / остаться на занятия (1, 2)  "))
    if j == 1:
        print("Сегодня у вас был тяжелый и насыщенный день, но вы явно провели время с пользой.")
        player.change_hp(-10)
        player.change_soc(15)
        volunteer_day.accepted = True

# ========== экзамен  ==========
def exam():

    if player.intellect_points <= 0:
        print("\nПлан был невероятно дерзкий! И такой же непродуманный... Не удивительно, ведь ваш интеллект достиг своей нижней границы, возможно даже преодолел ее... ")
    else:
        print("\nУдачи на экзамене! У вас есть все шансы сдать!")

    experience = 0
    options = [
        {"name": "краткий", "cost": 25, "exp": 15},
        {"name": "факт с лекции", "cost": 30, "exp": 25},
        {"name": "цитирование литературы", "cost": 35, "exp": 30},
        {"name": "как по учебнику", "cost": 40, "exp": 35},
        {"name": "мастермайнд", "cost": 45, "exp": 40}
    ]

    while experience < 100 and player.intellect_points > 0:
        print(f"\nУ вас {player.intellect_points} очков интеллекта.")
        print("Вы можете обменять очки интеллекта на варианты ответов:")
        print(f"\nТекущий прогресс: {experience}/100 опыта")
        print("Доступные варианты ответов:")

        for i, opt in enumerate(options, 1):
            print(f"{i}. Билет: {opt['name']}, Стоимость: {opt['cost']} очков интеллекта, даёт {opt['exp']} опыта")

        print(f"{len(options) + 1}. Закончить экзамен (Вы уверены, что сделали всё, что могли)")

        choice = input("Выберите вариант ответа (или поднимите белый флаг): ")

        try:
            choice = int(choice)
            if choice == len(options) + 1:
                if experience >= 100:
                    print("10+")
                    break
                else:
                    print(f"Оценка в LMS-зачётке: {experience // 10}")
                    break
            elif 1 <= choice <= len(options):
                selected = options[choice - 1]
                experience += selected["exp"]
                player.intellect_points -= selected['cost']
                print(f"\nВы выбрали вариант {choice}. Получено {selected['exp']} опыта.")
                if player.intellect_points < 0:
                    print("Кажется, рассудок вас окончательно покинул Т_Т")
                    break
        except ValueError:
            print("Пожалуйста, введите число.")

    print(f"Итоговый результат в баллах: {experience}/100 опыта")
    print(f"Осталось очков интеллекта: {player.intellect_points}")

# ========== главный цикл ==========
introduction()
for day in range(0, 7):
    print(f"День {day}-й.")
    for el in random_event_list:
        el.day_check(day)
        # if el.check:
        #     print(f"Сегодня должно произойти {el.name}")
    morning()
    if transport_event.check:
        bus_or_car_event()

    if volunteer_day.check:
        volunteering()
        if volunteer_day.accepted:
            evening()

    if not volunteer_day.check or not volunteer_day.accepted:
        if lecturer_ill.check:
            ill_lecturer()
        elif truant_offer.check:
            truant_event()
        elif not transport_event.check:
            lesson()
        if sport_lesson.check:
            sport()
        else:
            extra_curriculum()
        evening()

    for el in random_event_list:
        el.check = False

# ===== достижения =====
if volunteer_day.accepted and sport_lesson.accepted and player.attend_extra_lesson:
    player.all_events = True

answer_achievement = Achievements("Гений лингвистики", player.right_answer_count, 6, "вы ответили верно на все учебные вопросы")
wrong_answer_achievement = Achievements("Антигений", player.wrong_answer_count, 6, "вы ответили неверно на все учебные вопросы")
attend_all_lesson = Achievements("Ударник", player.lesson_count, 6, "вы посетили все пары (даже те, на которые могли и не приходить)")
truant_all_lesson = Achievements("Неуловимый", player.right_answer_count + player.wrong_answer_count , 3, "вы пропустили все возможные пары")
lucky = Achievements("Счастливчик", player.all_bonuses, True, "вы получили все возможные бонусы в опроснике абитуриента")
sport_enthusiast = Achievements("Герой спорта", player.sport_lesson_count, 1, "здоровое тело - здоровый ум... или как там?")
social_butterfly = Achievements("Душа компании", player.social_points, 80, "связи помогут вам, когда ничто другое не поможет")
scholar = Achievements("Заучка", player.intellect_points, 80, "вы достигли уровня знаний, достойного уважения")
enthusiast = Achievements("Энтузиаст", player.all_events, True, "вы сделали достойный выбор в каждом из случайных событий")

print("Учебная неделя подошла к концу. За ней прошла вторая, третья... Вы не заметили, как закончился семестр. Насталь время подводить итоги и готовиться к экзамену.")
answer_achievement.check()
wrong_answer_achievement.check()
attend_all_lesson.check()
truant_all_lesson.check()
lucky.check()
sport_enthusiast.check()
social_butterfly.check()
scholar.check()
enthusiast.check()

exam()